import { OnInit, ElementRef, OnDestroy, Renderer2, DoCheck } from '@angular/core';
import { ControlValueAccessor, NgControl, NgForm, FormGroupDirective } from '@angular/forms';
import { ErrorStateMatcher } from '@angular/material/core';
import { MatFormFieldControl } from '@angular/material/form-field';
import { FocusMonitor } from '@angular/cdk/a11y';
import { FileInput } from '../model/file-input.model';
import { FileInputMixinBase } from './file-input-mixin';
import * as ɵngcc0 from '@angular/core';
export declare class FileInputComponent extends FileInputMixinBase implements MatFormFieldControl<FileInput>, ControlValueAccessor, OnInit, OnDestroy, DoCheck {
    private fm;
    private _elementRef;
    private _renderer;
    _defaultErrorStateMatcher: ErrorStateMatcher;
    ngControl: NgControl;
    _parentForm: NgForm;
    _parentFormGroup: FormGroupDirective;
    static nextId: number;
    focused: boolean;
    controlType: string;
    autofilled: boolean;
    private _placeholder;
    private _required;
    valuePlaceholder: string;
    multiple: boolean;
    accept: string | null;
    errorStateMatcher: ErrorStateMatcher;
    id: string;
    describedBy: string;
    setDescribedByIds(ids: string[]): void;
    get value(): FileInput | null;
    set value(fileInput: FileInput | null);
    get placeholder(): string;
    set placeholder(plh: string);
    /**
     * Whether the current input has files
     */
    get empty(): boolean;
    get shouldLabelFloat(): boolean;
    get required(): boolean;
    set required(req: boolean);
    get isDisabled(): boolean;
    get disabled(): boolean;
    set disabled(dis: boolean);
    onContainerClick(event: MouseEvent): void;
    /**
     * @see https://angular.io/api/forms/ControlValueAccessor
     */
    constructor(fm: FocusMonitor, _elementRef: ElementRef, _renderer: Renderer2, _defaultErrorStateMatcher: ErrorStateMatcher, ngControl: NgControl, _parentForm: NgForm, _parentFormGroup: FormGroupDirective);
    private _onChange;
    private _onTouched;
    get fileNames(): string;
    writeValue(obj: FileInput | null): void;
    registerOnChange(fn: (_: any) => void): void;
    registerOnTouched(fn: any): void;
    /**
     * Remove all files from the file input component
     * @param [event] optional event that may have triggered the clear action
     */
    clear(event?: Event): void;
    change(event: Event): void;
    blur(): void;
    setDisabledState(isDisabled: boolean): void;
    ngOnInit(): void;
    open(): void;
    ngOnDestroy(): void;
    ngDoCheck(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<FileInputComponent, [null, null, null, null, { optional: true; self: true; }, { optional: true; }, { optional: true; }]>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<FileInputComponent, "ngx-mat-file-input", never, { "autofilled": "autofilled"; "accept": "accept"; "value": "value"; "placeholder": "placeholder"; "required": "required"; "disabled": "disabled"; "multiple": "multiple"; "valuePlaceholder": "valuePlaceholder"; "errorStateMatcher": "errorStateMatcher"; }, {}, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZS1pbnB1dC5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsiZmlsZS1pbnB1dC5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPbkluaXQsIEVsZW1lbnRSZWYsIE9uRGVzdHJveSwgUmVuZGVyZXIyLCBEb0NoZWNrIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb250cm9sVmFsdWVBY2Nlc3NvciwgTmdDb250cm9sLCBOZ0Zvcm0sIEZvcm1Hcm91cERpcmVjdGl2ZSB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IEVycm9yU3RhdGVNYXRjaGVyIH0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwvY29yZSc7XG5pbXBvcnQgeyBNYXRGb3JtRmllbGRDb250cm9sIH0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwvZm9ybS1maWVsZCc7XG5pbXBvcnQgeyBGb2N1c01vbml0b3IgfSBmcm9tICdAYW5ndWxhci9jZGsvYTExeSc7XG5pbXBvcnQgeyBGaWxlSW5wdXQgfSBmcm9tICcuLi9tb2RlbC9maWxlLWlucHV0Lm1vZGVsJztcbmltcG9ydCB7IEZpbGVJbnB1dE1peGluQmFzZSB9IGZyb20gJy4vZmlsZS1pbnB1dC1taXhpbic7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBGaWxlSW5wdXRDb21wb25lbnQgZXh0ZW5kcyBGaWxlSW5wdXRNaXhpbkJhc2UgaW1wbGVtZW50cyBNYXRGb3JtRmllbGRDb250cm9sPEZpbGVJbnB1dD4sIENvbnRyb2xWYWx1ZUFjY2Vzc29yLCBPbkluaXQsIE9uRGVzdHJveSwgRG9DaGVjayB7XG4gICAgcHJpdmF0ZSBmbTtcbiAgICBwcml2YXRlIF9lbGVtZW50UmVmO1xuICAgIHByaXZhdGUgX3JlbmRlcmVyO1xuICAgIF9kZWZhdWx0RXJyb3JTdGF0ZU1hdGNoZXI6IEVycm9yU3RhdGVNYXRjaGVyO1xuICAgIG5nQ29udHJvbDogTmdDb250cm9sO1xuICAgIF9wYXJlbnRGb3JtOiBOZ0Zvcm07XG4gICAgX3BhcmVudEZvcm1Hcm91cDogRm9ybUdyb3VwRGlyZWN0aXZlO1xuICAgIHN0YXRpYyBuZXh0SWQ6IG51bWJlcjtcbiAgICBmb2N1c2VkOiBib29sZWFuO1xuICAgIGNvbnRyb2xUeXBlOiBzdHJpbmc7XG4gICAgYXV0b2ZpbGxlZDogYm9vbGVhbjtcbiAgICBwcml2YXRlIF9wbGFjZWhvbGRlcjtcbiAgICBwcml2YXRlIF9yZXF1aXJlZDtcbiAgICB2YWx1ZVBsYWNlaG9sZGVyOiBzdHJpbmc7XG4gICAgbXVsdGlwbGU6IGJvb2xlYW47XG4gICAgYWNjZXB0OiBzdHJpbmcgfCBudWxsO1xuICAgIGVycm9yU3RhdGVNYXRjaGVyOiBFcnJvclN0YXRlTWF0Y2hlcjtcbiAgICBpZDogc3RyaW5nO1xuICAgIGRlc2NyaWJlZEJ5OiBzdHJpbmc7XG4gICAgc2V0RGVzY3JpYmVkQnlJZHMoaWRzOiBzdHJpbmdbXSk6IHZvaWQ7XG4gICAgZ2V0IHZhbHVlKCk6IEZpbGVJbnB1dCB8IG51bGw7XG4gICAgc2V0IHZhbHVlKGZpbGVJbnB1dDogRmlsZUlucHV0IHwgbnVsbCk7XG4gICAgZ2V0IHBsYWNlaG9sZGVyKCk6IHN0cmluZztcbiAgICBzZXQgcGxhY2Vob2xkZXIocGxoOiBzdHJpbmcpO1xuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgdGhlIGN1cnJlbnQgaW5wdXQgaGFzIGZpbGVzXG4gICAgICovXG4gICAgZ2V0IGVtcHR5KCk6IGJvb2xlYW47XG4gICAgZ2V0IHNob3VsZExhYmVsRmxvYXQoKTogYm9vbGVhbjtcbiAgICBnZXQgcmVxdWlyZWQoKTogYm9vbGVhbjtcbiAgICBzZXQgcmVxdWlyZWQocmVxOiBib29sZWFuKTtcbiAgICBnZXQgaXNEaXNhYmxlZCgpOiBib29sZWFuO1xuICAgIGdldCBkaXNhYmxlZCgpOiBib29sZWFuO1xuICAgIHNldCBkaXNhYmxlZChkaXM6IGJvb2xlYW4pO1xuICAgIG9uQ29udGFpbmVyQ2xpY2soZXZlbnQ6IE1vdXNlRXZlbnQpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBzZWUgaHR0cHM6Ly9hbmd1bGFyLmlvL2FwaS9mb3Jtcy9Db250cm9sVmFsdWVBY2Nlc3NvclxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGZtOiBGb2N1c01vbml0b3IsIF9lbGVtZW50UmVmOiBFbGVtZW50UmVmLCBfcmVuZGVyZXI6IFJlbmRlcmVyMiwgX2RlZmF1bHRFcnJvclN0YXRlTWF0Y2hlcjogRXJyb3JTdGF0ZU1hdGNoZXIsIG5nQ29udHJvbDogTmdDb250cm9sLCBfcGFyZW50Rm9ybTogTmdGb3JtLCBfcGFyZW50Rm9ybUdyb3VwOiBGb3JtR3JvdXBEaXJlY3RpdmUpO1xuICAgIHByaXZhdGUgX29uQ2hhbmdlO1xuICAgIHByaXZhdGUgX29uVG91Y2hlZDtcbiAgICBnZXQgZmlsZU5hbWVzKCk6IHN0cmluZztcbiAgICB3cml0ZVZhbHVlKG9iajogRmlsZUlucHV0IHwgbnVsbCk6IHZvaWQ7XG4gICAgcmVnaXN0ZXJPbkNoYW5nZShmbjogKF86IGFueSkgPT4gdm9pZCk6IHZvaWQ7XG4gICAgcmVnaXN0ZXJPblRvdWNoZWQoZm46IGFueSk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogUmVtb3ZlIGFsbCBmaWxlcyBmcm9tIHRoZSBmaWxlIGlucHV0IGNvbXBvbmVudFxuICAgICAqIEBwYXJhbSBbZXZlbnRdIG9wdGlvbmFsIGV2ZW50IHRoYXQgbWF5IGhhdmUgdHJpZ2dlcmVkIHRoZSBjbGVhciBhY3Rpb25cbiAgICAgKi9cbiAgICBjbGVhcihldmVudD86IEV2ZW50KTogdm9pZDtcbiAgICBjaGFuZ2UoZXZlbnQ6IEV2ZW50KTogdm9pZDtcbiAgICBibHVyKCk6IHZvaWQ7XG4gICAgc2V0RGlzYWJsZWRTdGF0ZShpc0Rpc2FibGVkOiBib29sZWFuKTogdm9pZDtcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIG9wZW4oKTogdm9pZDtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xuICAgIG5nRG9DaGVjaygpOiB2b2lkO1xufVxuIl19