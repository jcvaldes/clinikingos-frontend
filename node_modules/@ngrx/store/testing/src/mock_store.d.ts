import { Observable } from 'rxjs';
import { Action, ActionsSubject, ReducerManager, Store, MemoizedSelectorWithProps, MemoizedSelector } from '@ngrx/store';
import { MockState } from './mock_state';
import { MockSelector } from './mock_selector';
import * as ɵngcc0 from '@angular/core';
export declare class MockStore<T> extends Store<T> {
    private state$;
    private initialState;
    static selectors: Map<string | MemoizedSelector<any, any, import("@ngrx/store/src/selector").DefaultProjectorFn<any>> | MemoizedSelectorWithProps<any, any, any, import("@ngrx/store/src/selector").DefaultProjectorFn<any>>, any>;
    scannedActions$: Observable<Action>;
    constructor(state$: MockState<T>, actionsObserver: ActionsSubject, reducerManager: ReducerManager, initialState: T, mockSelectors?: MockSelector[]);
    setState(nextState: T): void;
    overrideSelector<T, Result>(selector: string, value: Result): MemoizedSelector<string, Result>;
    overrideSelector<T, Result>(selector: MemoizedSelector<T, Result>, value: Result): MemoizedSelector<T, Result>;
    overrideSelector<T, Result>(selector: MemoizedSelectorWithProps<T, any, Result>, value: Result): MemoizedSelectorWithProps<T, any, Result>;
    resetSelectors(): void;
    select(selector: any, prop?: any): Observable<any>;
    addReducer(): void;
    removeReducer(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MockStore<any>, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<MockStore<any>>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9ja19zdG9yZS5kLnRzIiwic291cmNlcyI6WyJtb2NrX3N0b3JlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBBY3Rpb24sIEFjdGlvbnNTdWJqZWN0LCBSZWR1Y2VyTWFuYWdlciwgU3RvcmUsIE1lbW9pemVkU2VsZWN0b3JXaXRoUHJvcHMsIE1lbW9pemVkU2VsZWN0b3IgfSBmcm9tICdAbmdyeC9zdG9yZSc7XG5pbXBvcnQgeyBNb2NrU3RhdGUgfSBmcm9tICcuL21vY2tfc3RhdGUnO1xuaW1wb3J0IHsgTW9ja1NlbGVjdG9yIH0gZnJvbSAnLi9tb2NrX3NlbGVjdG9yJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE1vY2tTdG9yZTxUPiBleHRlbmRzIFN0b3JlPFQ+IHtcbiAgICBwcml2YXRlIHN0YXRlJDtcbiAgICBwcml2YXRlIGluaXRpYWxTdGF0ZTtcbiAgICBzdGF0aWMgc2VsZWN0b3JzOiBNYXA8c3RyaW5nIHwgTWVtb2l6ZWRTZWxlY3RvcjxhbnksIGFueSwgaW1wb3J0KFwiQG5ncngvc3RvcmUvc3JjL3NlbGVjdG9yXCIpLkRlZmF1bHRQcm9qZWN0b3JGbjxhbnk+PiB8IE1lbW9pemVkU2VsZWN0b3JXaXRoUHJvcHM8YW55LCBhbnksIGFueSwgaW1wb3J0KFwiQG5ncngvc3RvcmUvc3JjL3NlbGVjdG9yXCIpLkRlZmF1bHRQcm9qZWN0b3JGbjxhbnk+PiwgYW55PjtcbiAgICBzY2FubmVkQWN0aW9ucyQ6IE9ic2VydmFibGU8QWN0aW9uPjtcbiAgICBjb25zdHJ1Y3RvcihzdGF0ZSQ6IE1vY2tTdGF0ZTxUPiwgYWN0aW9uc09ic2VydmVyOiBBY3Rpb25zU3ViamVjdCwgcmVkdWNlck1hbmFnZXI6IFJlZHVjZXJNYW5hZ2VyLCBpbml0aWFsU3RhdGU6IFQsIG1vY2tTZWxlY3RvcnM/OiBNb2NrU2VsZWN0b3JbXSk7XG4gICAgc2V0U3RhdGUobmV4dFN0YXRlOiBUKTogdm9pZDtcbiAgICBvdmVycmlkZVNlbGVjdG9yPFQsIFJlc3VsdD4oc2VsZWN0b3I6IHN0cmluZywgdmFsdWU6IFJlc3VsdCk6IE1lbW9pemVkU2VsZWN0b3I8c3RyaW5nLCBSZXN1bHQ+O1xuICAgIG92ZXJyaWRlU2VsZWN0b3I8VCwgUmVzdWx0PihzZWxlY3RvcjogTWVtb2l6ZWRTZWxlY3RvcjxULCBSZXN1bHQ+LCB2YWx1ZTogUmVzdWx0KTogTWVtb2l6ZWRTZWxlY3RvcjxULCBSZXN1bHQ+O1xuICAgIG92ZXJyaWRlU2VsZWN0b3I8VCwgUmVzdWx0PihzZWxlY3RvcjogTWVtb2l6ZWRTZWxlY3RvcldpdGhQcm9wczxULCBhbnksIFJlc3VsdD4sIHZhbHVlOiBSZXN1bHQpOiBNZW1vaXplZFNlbGVjdG9yV2l0aFByb3BzPFQsIGFueSwgUmVzdWx0PjtcbiAgICByZXNldFNlbGVjdG9ycygpOiB2b2lkO1xuICAgIHNlbGVjdChzZWxlY3RvcjogYW55LCBwcm9wPzogYW55KTogT2JzZXJ2YWJsZTxhbnk+O1xuICAgIGFkZFJlZHVjZXIoKTogdm9pZDtcbiAgICByZW1vdmVSZWR1Y2VyKCk6IHZvaWQ7XG59XG4iXX0=